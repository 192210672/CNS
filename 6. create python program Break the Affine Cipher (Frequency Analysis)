from collections import Counter
from math import gcd

def modular_inverse(a, m):
    for i in range(m):
        if (a * i) % m == 1:
            return i
    return None

def break_affine_cipher(ciphertext):
    freq = Counter(ciphertext.replace(" ", ""))
    most_common = [char for char, _ in freq.most_common(2)]
    b, u = ord(most_common[0]) - ord('A'), ord(most_common[1]) - ord('A')

    for a in range(1, 26, 2):  # Check valid 'a' values (gcd(a, 26) = 1)
        if gcd(a, 26) == 1:
            inv_a = modular_inverse(a, 26)
            if inv_a:
                b_guess = (b - (inv_a * 4) % 26) % 26  # Assuming 'E' maps to 'B'
                print(f"Possible key: a={a}, b={b_guess}")

break_affine_cipher("SAMPLE CIPHERTEXT")  # Replace with actual ciphertext
